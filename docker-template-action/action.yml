name: docker-template

# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://wallis.dev/blog/composite-github-actions

inputs:
  DOCKER_CONTEXT:
    description: 'Path of Dockerfile'
    required: true
  DOCKER_PLATFORMS:
    description: 'Docker buildx platforms'
    required: false
    default: 'linux/amd64,linux/arm64'
  DOCKER_FILE:
    description: 'Dockerfile name'
    required: false
    default: Dockerfile
  DOCKER_IMAGE_NAME:
    description: 'Docker image name'
    required: true
  DOCKER_REPOSITORY:
    description: 'Docker repository name'
    required: true
  DOCKER_TAG_PREFIX:
    description: 'Tag prefix to strip out'
    required: false
    default: 'v'
  DOCKER_DEFAULT_TAG:
    description: 'Default Docker tag'
    required: false
  SECRET_DOCKERHUB_USERNAME:
    description: 'DockerHub username'
    required: true
  SECRET_DOCKERHUB_TOKEN:
    description: 'DockerHub token'
    required: true
  SECRET_DISCORD_WEBHOOK_URL:
    description: 'Discord webhook url'
    required: false

# all "run" steps require "shell: bash" in composite actions
runs:
  using: 'composite'
  steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    # extracts tag from ref, returns semver tag or sha suffix or default tag
    - name: Get Docker tag
      id: get-docker-tag
      env:
        GITHUB_REF: ${{ github.ref }}
        COMMIT_SHA: ${{ github.sha }}
        TAG_PREFIX: ${{ inputs.DOCKER_TAG_PREFIX }}
        DEFAULT_TAG: ${{ inputs.DOCKER_DEFAULT_TAG }}
      shell: bash
      # see https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion
      run: |
        if [[ ${{ github.ref_type }} == "tag" ]]; then
          echo "tag=${GITHUB_REF#refs/tags/$TAG_PREFIX}" >> ${GITHUB_OUTPUT}
        elif [[ ${DEFAULT_TAG} == "" ]]; then
          echo "tag=${COMMIT_SHA:0:7}" >> ${GITHUB_OUTPUT}
        else
          echo "tag=${DEFAULT_TAG}" >> ${GITHUB_OUTPUT}
        fi
    
    - name: Output Docker tag
      shell: bash
      run: echo ${{ steps.get-docker-tag.outputs.tag }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.SECRET_DOCKERHUB_USERNAME }}
        password: ${{ inputs.SECRET_DOCKERHUB_TOKEN }}

    - name: Build and push [${{ env.IMAGE_NAME }}]
      uses: docker/build-push-action@v5
      env:
        IMAGE_NAME: ${{ inputs.DOCKER_IMAGE_NAME }}
      with:
        context: ${{ inputs.DOCKER_CONTEXT }}
        platforms: ${{ inputs.DOCKER_PLATFORMS }}
        file: ${{ inputs.DOCKER_CONTEXT }}/${{ inputs.DOCKER_FILE }}
        # if false it will only build
        push: true
        tags: |
          ${{ inputs.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          ${{ inputs.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.get-docker-tag.outputs.tag }}

    - name: Notification
      if: ${{ inputs.SECRET_DISCORD_WEBHOOK_URL != '' }}
      uses: hckops/actions/discord-action@main
      with:
        action: create-message
        webhook-url: ${{ inputs.SECRET_DISCORD_WEBHOOK_URL }}
        # markdown format
        message: "> Repository:  **${{ github.repository }}**\\n> Docker:\\t\\t [${{ inputs.DOCKER_IMAGE_NAME }}](https://hub.docker.com/r/${{ inputs.DOCKER_REPOSITORY }}/${{ inputs.DOCKER_IMAGE_NAME }})\\n> Status:\\t\\t  **NEW image**"
